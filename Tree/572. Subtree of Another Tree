class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:return True
        if not p or not q:return False
        return p.val == q.val and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not root:return False
        if root.val == subRoot.val and self.isSameTree(root,subRoot):
            return True
        else:
            if self.isSubtree(root.left,subRoot) or self.isSubtree(root.right,subRoot):
                return True
            return False